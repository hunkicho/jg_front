# name: Front_deploy

# # 트리거를 수행할 브랜치를 지정합니다.
# on:
#   push:
#     branches: [ master ]

# # 환경설정
# # env:
# #   DOCKER_IMAGE: ghcr.io/${{ github.actor }}/project_front
# #   VERSION: ${{ github.sha }}
# #   NAME: go_cicd
# env:
#   NAME: hunkicho
#   REPO: jg_front
#   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
  
# permissions:
#   contents: read
#   actions: read

# jobs:
#   # 빌드 Job
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       # github repository에서 checkout
#       - name: Checkout
#         uses: actions/checkout@v2
#       # docker build 수행
#       - name: Set up docker buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v1


#       - name: Cache docker layers
#         uses: actions/cache@v2
#         with:
#           path: /tmp/.buildx-cache
#           key: ${{ runner.os }}-buildx-${{ env.VERSION }}
#           restore-keys: |
#             ${{ runner.os }}-buildx-


#       # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
#       # - name: Login to ghcr
#       #   uses: docker/login-action@v1
#       #   with:
#       #     registry: ghcr.io
#       #     username: ${{ github.actor }}
#       #     password: ${{ secrets.GITACTION_TOKEN }}
#       # - name: Build and push
#       #   id: docker_build
#       #   uses: docker/build-push-action@v2
#       #   with:
#       #     context: .
#       #     file: ./Dockerfile
#       #     builder: ${{ steps.buildx.outputs.name }}
#       #     push: true
#       #     tags: ${{ env.DOCKER_IMAGE }}:latest
#       #     cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
#       #     cache-to: type=gha,mode=max


#       # - name: action-slack
#       #   uses: 8398a7/action-slack@v3
#       #   with:
#       #     status: ${{ job.status }}
#       #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest  # selectable (default: repo,message)
#       #   if: always() # Pick up events even if the job fails or is canceled.

#       # - name: Slack notification
#       #   env:
#       #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
#       #     SLACK_USERNAME: ThisIsMyUsername # Optional. (defaults to webhook app)
#       #     SLACK_CHANNEL: general # Optional. (defaults to webhook)
#       #     SLACK_AVATAR: repository # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
#       #   uses: Ilshidur/action-slack@2.0.2
#       #   with:
#       #     args: 'A new commit has been pushed.' # Optional


#       # dockerhub 테스트
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # - name: build and push to DockerHub
#       #   run: |
#       #     docker build -t ${{ env.REPO }} .
#       #     docker tag ${{ env.REPO }}:latest ${{ env.NAME }}/${{ env.REPO }}:latest
#       #     docker push ${{ env.NAME }}/${{ env.REPO }}:latest

#       # github action에서는 docker cache가 동작하지 않는다.
#       # github actions의 러너는 매번 새로운 가상환경에서 실행되기 떄문에 모든 작업은 새롭게 다시 시작된다.
#       # 따라서 docker/build-push-actio를 이용하여 github actions에 직접 캐시를 저장시킨다.
#       - name: build and push to DockerHub
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           push: true
#           tags: ${{ env.NAME }}/${{ env.REPO }}:latest
#           cache-from: type:gha                         # gha는 github action용 캐시 의미       
#           cache-to: type=gha,mode=max

#   # 배포 Job
#   deploy:
#     needs: build  # build 후에 실행되도록 정의
#     name: Deploy
#     runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
#     steps:
#       # - name: Login to ghcr
#       #   uses: docker/login-action@v1
#       #   with:
#       #     registry: ghcr.io
#       #     username: ${{ github.actor }}
#       #     password: ${{ secrets.GITACTION_TOKEN }}
#       # 3000 -> 80 포트로 수행하도록 지정
#       - name: Docker run
#         run: |
#           sudo docker stop ${{ env.NAME }}_${{ env.REPO }} && sudo docker rm ${{ env.NAME }}_${{ env.REPO }} && sudo docker rmi ${{ env.NAME }}/${{ env.REPO }}:latest
#           sudo docker run -d -p 80:3000 --name ${{ env.NAME }}_${{ env.REPO }} --restart always ${{ env.NAME }}/${{ env.REPO }}:latest

#       - name: Slack notification
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
#           # SLACK_USERNAME: ThisIsMyUsername # Optional. (defaults to webhook app)
#           # SLACK_CHANNEL: general # Optional. (defaults to webhook)
#           # SLACK_AVATAR: repository # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
#         uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ job.status }}
#           author_name: Github Action Test # default: 8398a7@action-slack
#           fields: repo,message,commit,author,action,eventName,ref,workflow,job,took



name: Front_deploy
on:
  push:
    branches: [ master ]
env:
  VERSION: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
  
permissions:
  contents: read
  actions: read
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: create remote directory
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.PRIVATE_KEY }}
      #     script: mkdir -p /home/${{ secrets.SERVER_USER }}/srv/${{ secrets.SERVER_USER }}

      # - name: copy source via ssh key
      #   uses: burnett01/rsync-deployments@4.1
      #   with:
      #     switches: -avzr --delete
      #     remote_path: /home/${{ secrets.SERVER_USER }}/srv/${{ secrets.SERVER_USER }}/
      #     remote_host: ${{ secrets.HOST }}
      #     remote_user: ${{ secrets.SERVER_USER }}
      #     remote_key: ${{ secrets.PRIVATE_KEY }}

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: build and push front image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_FRONT_REPO }}:latest
          cache-from: type:gha                         # gha는 github action용 캐시 의미       
          cache-to: type=gha,mode=max

      - name: build and push Nginx image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./config/nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_FRONT_WEBSERVER_REPO }}:latest
          cache-from: type:gha                         # gha는 github action용 캐시 의미       
          cache-to: type=gha,mode=max
          
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ]
    steps:

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sh /home/${{ secrets.SERVER_USER }}/actions-runner/deploy.sh

      - name: Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          # SLACK_USERNAME: ThisIsMyUsername # Optional. (defaults to webhook app)
          # SLACK_CHANNEL: general # Optional. (defaults to webhook)
          # SLACK_AVATAR: repository # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action Test # default: 8398a7@action-slack
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
    

